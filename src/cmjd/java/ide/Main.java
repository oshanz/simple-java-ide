/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cmjd.java.ide;

import com.inet.jortho.FileUserDictionary;
import com.inet.jortho.SpellChecker;
import java.awt.Color;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.AbstractAction;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.undo.UndoManager;
import org.jfree.ui.FontChooserDialog;

/**
 *
 * @author oshanz
 */
public class Main extends javax.swing.JFrame {

    private ArrayList<TabModel> arrayList;
    private int caretPosition;
    private int count;
    private HashSet<String> hashSet;

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();

        arrayList = new ArrayList<TabModel>();
        hashSet = new HashSet<String>();

        loadRecents();

        autofillCheckBoxMenuItem.setState(true);
        autoupCheckBoxMenuItem.setState(true);
        dicCheckBoxMenuItem.setState(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textTabbedPane = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        newMenuItem = new javax.swing.JMenuItem();
        openMenuItem = new javax.swing.JMenuItem();
        recentMenu = new javax.swing.JMenu();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAllMenuItem = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        exitMenuItem = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        copyMenuItem = new javax.swing.JMenuItem();
        cutMenuItem = new javax.swing.JMenuItem();
        pastMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        undoMenuItem = new javax.swing.JMenuItem();
        redoMenuItem = new javax.swing.JMenuItem();
        fontMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        autofillCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        dicCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        autoupCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        keyMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        nextTabMenuItem = new javax.swing.JMenuItem();
        preTabMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        closeTabMenuItem = new javax.swing.JMenuItem();
        closeAllTabMenuItem = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        compileMenuItem = new javax.swing.JMenuItem();
        runMenuItem = new javax.swing.JMenuItem();
        buildMenuItem = new javax.swing.JMenuItem();
        bandrunMenuItem = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Senti");

        textTabbedPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                textTabbedPaneMouseReleased(evt);
            }
        });
        textTabbedPane.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                textTabbedPaneComponentShown(evt);
            }
        });
        textTabbedPane.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                textTabbedPanePropertyChange(evt);
            }
        });
        textTabbedPane.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                textTabbedPaneVetoableChange(evt);
            }
        });

        jMenu1.setText("File");

        newMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newMenuItem.setText("New");
        newMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(newMenuItem);

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(openMenuItem);

        recentMenu.setText("Recent Codes");
        jMenu1.add(recentMenu);
        jMenu1.add(jSeparator4);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(saveMenuItem);

        saveAllMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        saveAllMenuItem.setText("Save All");
        saveAllMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAllMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(saveAllMenuItem);
        jMenu1.add(jSeparator5);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.ALT_MASK));
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(exitMenuItem);

        jMenuBar1.add(jMenu1);

        jMenu4.setText("Edit");

        copyMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        copyMenuItem.setText("Copy");
        copyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyMenuItemActionPerformed(evt);
            }
        });
        jMenu4.add(copyMenuItem);

        cutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cutMenuItem.setText("Cut");
        cutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutMenuItemActionPerformed(evt);
            }
        });
        jMenu4.add(cutMenuItem);

        pastMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        pastMenuItem.setText("Past");
        pastMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pastMenuItemActionPerformed(evt);
            }
        });
        jMenu4.add(pastMenuItem);
        jMenu4.add(jSeparator2);

        undoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        undoMenuItem.setText("Undo");
        undoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoMenuItemActionPerformed(evt);
            }
        });
        jMenu4.add(undoMenuItem);

        redoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        redoMenuItem.setText("Redo");
        redoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoMenuItemActionPerformed(evt);
            }
        });
        jMenu4.add(redoMenuItem);

        fontMenuItem.setText("Font");
        fontMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontMenuItemActionPerformed(evt);
            }
        });
        jMenu4.add(fontMenuItem);
        jMenu4.add(jSeparator1);

        autofillCheckBoxMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        autofillCheckBoxMenuItem.setSelected(true);
        autofillCheckBoxMenuItem.setText("Auto fill");
        autofillCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autofillCheckBoxMenuItemActionPerformed(evt);
            }
        });
        jMenu4.add(autofillCheckBoxMenuItem);

        dicCheckBoxMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        dicCheckBoxMenuItem.setSelected(true);
        dicCheckBoxMenuItem.setText("Dictionary");
        dicCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dicCheckBoxMenuItemActionPerformed(evt);
            }
        });
        jMenu4.add(dicCheckBoxMenuItem);

        autoupCheckBoxMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        autoupCheckBoxMenuItem.setSelected(true);
        autoupCheckBoxMenuItem.setText("Auto update");
        autoupCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoupCheckBoxMenuItemActionPerformed(evt);
            }
        });
        jMenu4.add(autoupCheckBoxMenuItem);

        keyMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_SPACE, java.awt.event.InputEvent.CTRL_MASK));
        keyMenuItem.setText("KeyTip");
        keyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyMenuItemActionPerformed(evt);
            }
        });
        jMenu4.add(keyMenuItem);

        jMenuBar1.add(jMenu4);

        jMenu2.setText("Tab");

        nextTabMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_2, java.awt.event.InputEvent.ALT_MASK));
        nextTabMenuItem.setText("next tab");
        nextTabMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextTabMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(nextTabMenuItem);

        preTabMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_1, java.awt.event.InputEvent.ALT_MASK));
        preTabMenuItem.setText("pre. tab");
        preTabMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                preTabMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(preTabMenuItem);
        jMenu2.add(jSeparator3);

        closeTabMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        closeTabMenuItem.setText("close tab ");
        closeTabMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeTabMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(closeTabMenuItem);

        closeAllTabMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        closeAllTabMenuItem.setText("close all");
        closeAllTabMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeAllTabMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(closeAllTabMenuItem);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Java");

        compileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F8, 0));
        compileMenuItem.setText("Complie");
        compileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compileMenuItemActionPerformed(evt);
            }
        });
        jMenu3.add(compileMenuItem);

        runMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        runMenuItem.setText("Run");
        runMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runMenuItemActionPerformed(evt);
            }
        });
        jMenu3.add(runMenuItem);

        buildMenuItem.setText("Build");
        buildMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buildMenuItemActionPerformed(evt);
            }
        });
        jMenu3.add(buildMenuItem);

        bandrunMenuItem.setText("Build and Run");
        bandrunMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bandrunMenuItemActionPerformed(evt);
            }
        });
        jMenu3.add(bandrunMenuItem);

        jMenuBar1.add(jMenu3);

        jMenu5.setText("Help");

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        jMenu5.add(aboutMenuItem);

        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(textTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 703, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(textTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 623, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // TODO add your handling code here:


        JFileChooser jFileChooser = new JFileChooser();
        jFileChooser.setMultiSelectionEnabled(true);
        FileFilter fileNameExtensionFilter = new FileNameExtensionFilter("*.java File", "java");
        jFileChooser.setFileFilter(fileNameExtensionFilter);
        jFileChooser.showOpenDialog(this);
        File[] selectedFiles = jFileChooser.getSelectedFiles();

        ArrayList<File> preFiles = new ArrayList<File>();
        for (int i = 0; i < arrayList.size(); i++) {
            preFiles.add(arrayList.get(i).getFile());
            //     System.out.println(arrayList.size()+" ");
        }

        ArrayList<File> finelFiles = new ArrayList<File>();
        for (int i = 0; i < selectedFiles.length; i++) {
            for (int j = 0; j < preFiles.size(); j++) {
                // System.out.println(selectedFiles[i].toString()+" "+preFiles.get(j).toString());
                if (selectedFiles[i].compareTo(preFiles.get(j)) == 0) {
                    JOptionPane.showMessageDialog(this, selectedFiles[i] + " Class Alrady Viwed");
                    break;
                } else if (preFiles.size() - 1 == j) {
                    finelFiles.add(selectedFiles[i]);
                }
            }
        }

        if (arrayList.isEmpty()) {
            for (File file : selectedFiles) {
                finelFiles.add(file);
            }
        }

        for (File file : finelFiles) {
            if (file != null) {
                JTextPane jTextPane = new JTextPane();
                StyleContext styleContext = new StyleContext();
                jTextPane.setDocument(new DefaultStyledDocument(styleContext));
                jTextPane.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));

                JScrollPane jScrollPane = new JScrollPane(jTextPane);
                jScrollPane.setSize(textTabbedPane.getSize());
                textTabbedPane.addTab(file.getName(), jScrollPane);

                try {
                    final UndoManager undoManager = new UndoManager();
                    FileReader fileReader = new FileReader(file);
                    BufferedReader bufferedReader = new BufferedReader(fileReader);
                    String line;
                    String text = "";
                    while ((line = bufferedReader.readLine()) != null) {
                        text += line + "\n";
                    }
                    jTextPane.setText(text);
                    textTabbedPane.setSelectedIndex(textTabbedPane.getTabCount() - 1);
                    jTextPane.getStyledDocument().addUndoableEditListener(new UndoableEditListener() {
                        @Override
                        public void undoableEditHappened(UndoableEditEvent e) {
                            undoManager.undoableEditHappened(e);
                        }
                    });
                    // updateCheckBoxMenuItemActionPerformed(evt);


                    arrayList.add(new TabModel(file, jTextPane, undoManager, true, styleContext));

                    keywordSerach(jTextPane);


                    autofillCheckBoxMenuItemActionPerformed(evt);
                    autoupCheckBoxMenuItemActionPerformed(evt);
                    dicCheckBoxMenuItemActionPerformed(evt);


                    setTitle(file.getAbsolutePath());
                } catch (FileNotFoundException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        // TODO add your handling code here:
        if ((!arrayList.isEmpty()) && arrayList.size() >= textTabbedPane.getSelectedIndex() + 1) {
            TabModel get = arrayList.get(textTabbedPane.getSelectedIndex());
            saveSelecedtab(get.getFile(), get.getjTextPane());
            keywordSerach(get.getjTextPane());
            get.setSaved(true);
            setTitle("Saved");

        }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void closeTabMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeTabMenuItemActionPerformed
        // TODO add your handling code here:
        if (textTabbedPane.getTabCount() > 0) {
            if (!arrayList.get(textTabbedPane.getSelectedIndex()).isSaved()) {
                //   System.out.println((!arrayList.get(textTabbedPane.getSelectedIndex()).isSaved()));
                int showConfirmDialog = JOptionPane.showConfirmDialog(this, "Do you want to Save and Close? ", "Close Tab", JOptionPane.YES_NO_OPTION);

                if (showConfirmDialog == 0) {
                    saveMenuItemActionPerformed(evt);
                    closetab();
                } else if (showConfirmDialog == 1) {
                    closetab();
                }
            } else {
                closetab();

            }
        }
    }//GEN-LAST:event_closeTabMenuItemActionPerformed

    private void closeAllTabMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeAllTabMenuItemActionPerformed
        // TODO add your handling code here:
        if (textTabbedPane.getTabCount() > 0) {

            int showConfirmDialog = 5;
            boolean allsaved = false;
            boolean next = true;
            // System.out.println(textTabbedPane.getTabCount() + " " + arrayList.size());

            for (int i = 0; i < textTabbedPane.getTabCount(); i++) {
                if (!arrayList.get(i).isSaved()) {
                    allsaved = false;
                    if (i == textTabbedPane.getTabCount() - 1 && !allsaved) {
                        next = false;
                        JOptionPane.showMessageDialog(this, "All unsaved tabs");
                    }
                } else {
                    allsaved = true;
                }
            }

            if (allsaved) {
                showConfirmDialog = 1;
            } else if (next) {
                showConfirmDialog = JOptionPane.showConfirmDialog(this, "Only close saved tabs? ", "Close Tab", JOptionPane.OK_CANCEL_OPTION);

            }

            if (showConfirmDialog == 0) {
                for (int i = 0; i < textTabbedPane.getTabCount(); i++) {
                    if (arrayList.get(i).isSaved()) {
                        TabModel get = arrayList.get(i);
                        textTabbedPane.remove(i);
                        hashSet.add(arrayList.get(i).getFile().getAbsolutePath());
                        arrayList.remove(i);
                    }
                }
            } else if (showConfirmDialog == 1) {
                for (int i = 0; i < textTabbedPane.getTabCount(); i++) {
                    hashSet.add(arrayList.get(i).getFile().getAbsolutePath());
                }
                textTabbedPane.removeAll();
                arrayList = new ArrayList<TabModel>();
            }

            recentMenu.removeAll();
            for (String file : hashSet) {
                JMenuItem jMenuItem = new JMenuItem(file);
                jMenuItem.addActionListener(new AbstractAction() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        open(e.getSource());
                    }
                });
                recentMenu.add(jMenuItem);
            }
        }

        setTitle("Senti");
    }//GEN-LAST:event_closeAllTabMenuItemActionPerformed

    private void newMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuItemActionPerformed
        // TODO add your handling code here:
        String showInputDialog = JOptionPane.showInputDialog(this, "Input Class Name", "File Name", JOptionPane.PLAIN_MESSAGE);
        if (showInputDialog != null && showInputDialog.matches("[\\p{Upper}][\\d\\p{Lower}\\p{Upper}]+")) {
            JFileChooser jFileChooser = new JFileChooser();
            FileFilter fileNameExtensionFilter = new FileNameExtensionFilter(showInputDialog + ".java", showInputDialog);
            jFileChooser.setFileFilter(fileNameExtensionFilter);
            jFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            jFileChooser.showDialog(this, "select folder");
            File selectedFile = jFileChooser.getSelectedFile();

            if (selectedFile != null) {
                File file = new File(selectedFile + "/" + showInputDialog + ".java");
                try {
                    boolean createNewFile = file.createNewFile();
                    if (createNewFile) {
                        final UndoManager undoManager = new UndoManager();
                        JTextPane jTextPane = new JTextPane();
                        StyleContext styleContext = new StyleContext();
                        jTextPane.setDocument(new DefaultStyledDocument(styleContext));
                        jTextPane.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
                        JScrollPane jScrollPane = new JScrollPane(jTextPane);
                        jScrollPane.setSize(textTabbedPane.getSize());
                        textTabbedPane.addTab(file.getName(), jScrollPane);

                        jTextPane.setText("\nclass " + showInputDialog + "{\n\tpublic static void main(String[] args){\n\t}\n}");
                        jTextPane.setCaretPosition(51);

                        textTabbedPane.setSelectedIndex(textTabbedPane.getTabCount() - 1);
                        arrayList.add(new TabModel(file, jTextPane, undoManager, true, styleContext));

                        saveMenuItemActionPerformed(evt);

                        setTitle(file.getAbsolutePath());
                        jTextPane.getStyledDocument().addUndoableEditListener(new UndoableEditListener() {
                            @Override
                            public void undoableEditHappened(UndoableEditEvent e) {
                                undoManager.undoableEditHappened(e);
                            }
                        });


                        autofillCheckBoxMenuItemActionPerformed(evt);
                        autoupCheckBoxMenuItemActionPerformed(evt);
                        dicCheckBoxMenuItemActionPerformed(evt);

                        keywordSerach(jTextPane);
                    } else {
                        JOptionPane.showMessageDialog(this, "Cannot Create " + showInputDialog + " Class. Its exist at " + selectedFile + " path");
                    }
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            }
        } else if (showInputDialog != null && !showInputDialog.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Class name Invalid");
        }


    }//GEN-LAST:event_newMenuItemActionPerformed

    private void nextTabMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextTabMenuItemActionPerformed
        // TODO add your handling code here:
        if ((textTabbedPane.getSelectedIndex() + 1) < textTabbedPane.getTabCount()) {
            textTabbedPane.setSelectedIndex(textTabbedPane.getSelectedIndex() + 1);
        } else if ((textTabbedPane.getSelectedIndex() + 1) == textTabbedPane.getTabCount()) {
            textTabbedPane.setSelectedIndex(0);
        }
        TabModel get = arrayList.get(textTabbedPane.getSelectedIndex());
        //   setundoredo(get.getjTextPane(), get.getUndoManager());
        setTitle(get.getFile().getAbsolutePath());
    }//GEN-LAST:event_nextTabMenuItemActionPerformed

    private void preTabMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preTabMenuItemActionPerformed
        // TODO add your handling code here:
        if (textTabbedPane.getSelectedIndex() > 0) {
            textTabbedPane.setSelectedIndex(textTabbedPane.getSelectedIndex() - 1);
        }
        TabModel get = arrayList.get(textTabbedPane.getSelectedIndex());
        //  setundoredo(get.getjTextPane(), get.getUndoManager());
        setTitle(get.getFile().getAbsolutePath());
    }//GEN-LAST:event_preTabMenuItemActionPerformed

    private void textTabbedPanePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_textTabbedPanePropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_textTabbedPanePropertyChange

    private void textTabbedPaneComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_textTabbedPaneComponentShown
        // TODO add your handling code here:
    }//GEN-LAST:event_textTabbedPaneComponentShown

    private void textTabbedPaneVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_textTabbedPaneVetoableChange
        // TODO add your handling code here:
    }//GEN-LAST:event_textTabbedPaneVetoableChange

    private void textTabbedPaneMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textTabbedPaneMouseReleased
        // TODO add your handling code here:
        if ((!arrayList.isEmpty()) && arrayList.size() >= textTabbedPane.getSelectedIndex() + 1) {
            TabModel get = arrayList.get(textTabbedPane.getSelectedIndex());
            setTitle(get.getFile().getAbsolutePath());
            //  setundoredo(get.getjTextPane(), get.getUndoManager());
            // keywordSerach(null);
        }


    }//GEN-LAST:event_textTabbedPaneMouseReleased

    private void compileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compileMenuItemActionPerformed
        // TODO add your handling code here:
        if ((!arrayList.isEmpty()) && arrayList.size() >= textTabbedPane.getSelectedIndex() + 1) {
            TabModel get = arrayList.get(textTabbedPane.getSelectedIndex());
            saveSelecedtab(get.getFile(), get.getjTextPane());
            try {
                Process exec = Runtime.getRuntime().exec("javac " + get.getFile() );//+ " 2> " + get.getFile().getParent() + "/javac.log");


//                ProcessBuilder processBuilder = new ProcessBuilder("/bin/bash");
//                processBuilder.redirectErrorStream(true);
//                Process start = processBuilder.start();

                // | tee " + get.getFile().getParent() + "/javac.log"
                //gnome-terminal -x
                //> javac.log 2>&1 // javac
                //  System.err.println(exec.getErrorStream());
                //System.out.println("javac " + get.getFile() + " | tee " + get.getFile().getParent() + "/javac.log");
                //
//                BufferedReader err = new BufferedReader(new InputStreamReader(start.getErrorStream()));
//                String line;
//                while ((line = err.readLine()) != null) {
//                    System.out.println(line);
//                }

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
    }//GEN-LAST:event_compileMenuItemActionPerformed

    private void saveAllMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAllMenuItemActionPerformed
        // TODO add your handling code here:
        for (TabModel tabModel : arrayList) {
            for (int i = 0; i < textTabbedPane.getTabCount(); i++) {
                if (!arrayList.get(i).isSaved()) {
                    TabModel get = arrayList.get(i);
                    saveSelecedtab(get.getFile(), get.getjTextPane());
                    get.setSaved(true);
                    setTitle("All saved");
                }
            }
            keywordSerach(null);

        }
    }//GEN-LAST:event_saveAllMenuItemActionPerformed

    private void runMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runMenuItemActionPerformed
        // TODO add your handling code here:
        if ((!arrayList.isEmpty()) && arrayList.size() >= textTabbedPane.getSelectedIndex() + 1) {
            TabModel get = arrayList.get(textTabbedPane.getSelectedIndex());
            saveSelecedtab(get.getFile(), get.getjTextPane());
            compileMenuItemActionPerformed(evt);
            try {
                String[] split = get.getFile().getName().split("\\.");
                Runtime.getRuntime().exec("gnome-terminal -x java " + split[0], null, get.getFile().getParentFile());
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
    }//GEN-LAST:event_runMenuItemActionPerformed

    private void undoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoMenuItemActionPerformed
        // TODO add your handling code here:
        if (textTabbedPane.getTabCount() > 0) {
            TabModel get = arrayList.get(textTabbedPane.getSelectedIndex());
            if (get.getUndoManager().canUndo()) {
                get.getUndoManager().undo();

            } else {
                setTitle("\t Noting to undo");
            }
        }

    }//GEN-LAST:event_undoMenuItemActionPerformed

    private void redoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoMenuItemActionPerformed
        // TODO add your handling code here:
        if (textTabbedPane.getTabCount() > 0) {
            TabModel get = arrayList.get(textTabbedPane.getSelectedIndex());
            if (get.getUndoManager().canUndo()) {
                get.getUndoManager().redo();
            } else {
                setTitle("\t Noting to redo");
            }
        }
    }//GEN-LAST:event_redoMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        // TODO add your handling code here:
        new About(Main.this, false).setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void fontMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontMenuItemActionPerformed
        // TODO add your handling code here:
        if (textTabbedPane.getTabCount() > 0) {
            FontChooserDialog fontChooserDialog = new FontChooserDialog(this, "Select Settings", false, arrayList.get(textTabbedPane.getSelectedIndex()).getjTextPane().getFont());
            fontChooserDialog.setSize(400, 400);
            fontChooserDialog.setAlwaysOnTop(true);
            fontChooserDialog.setVisible(true);

            seteditfont(arrayList.get(textTabbedPane.getSelectedIndex()).getjTextPane(), fontChooserDialog.getSelectedFont());
        }
    }//GEN-LAST:event_fontMenuItemActionPerformed

    private void buildMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buildMenuItemActionPerformed
        // TODO add your handling code here:
        if (textTabbedPane.getTabCount() > 0) {
            // compileMenuItemActionPerformed(evt);
            TabModel get = arrayList.get(textTabbedPane.getSelectedIndex());
            String[] split = get.getFile().getName().split("\\.");
            String replace = get.getFile().getParent().replace('/', '.');
            String substring = replace.substring(1);
            try {
                Runtime.getRuntime().exec("gnome-terminal -x /opt/jdk1.7.0_07/bin/jar -cvfe "
                        + get.getFile().getParent() + "/" + split[0] + ".jar "
                        + substring + "." + split[0] + " "
                        + get.getFile().getParent() + "/" + split[0] + ".class");

                System.out.println("gnome-terminal -x /opt/jdk1.7.0_07/bin/jar cvf "
                        + get.getFile().getParent() + "/" + split[0] + ".jar "
                        + substring + "." + split[0] + " "
                        + get.getFile().getParent() + "/" + split[0] + ".class");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
    }//GEN-LAST:event_buildMenuItemActionPerformed

    private void bandrunMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bandrunMenuItemActionPerformed
        // TODO add your handling code here:
        if (textTabbedPane.getTabCount() > 0) {
            buildMenuItemActionPerformed(evt);
            TabModel get = arrayList.get(textTabbedPane.getSelectedIndex());
            String[] split = get.getFile().getName().split("\\.");
            try {
                Runtime.getRuntime().exec("gnome-terminal -x java -jar "
                        + get.getFile().getParent() + "/" + split[0] + ".jar ");

                System.out.println("gnome-terminal -x java -jar "
                        + get.getFile().getParent() + "/" + split[0] + ".jar ");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
    }//GEN-LAST:event_bandrunMenuItemActionPerformed

    private void keyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyMenuItemActionPerformed
        // TODO add your handling code here:
        if (textTabbedPane.getTabCount() > 0) {
            JTextPane jTextPane = arrayList.get(textTabbedPane.getSelectedIndex()).getjTextPane();
            String selectedText = null;
            try {
                selectedText = jTextPane.getText(caretPosition + 1, count);

            } catch (BadLocationException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
            //   System.out.println(selectedText + " " + caretPosition + " " + count);


            final String string[] = {"abstract", "assert", "boolean", "break", "byte", "case",
                "catch", "char", "class", "const", "continue", "default", "do", "double", "else",
                "enum", "extends", "final", "finally", "float", "for", "goto", "if", "implements",
                "import", "instanceof", "int", "interface", "long", "native", "new", "package", "private",
                "protected", "public", "return", "short", "static", "strictfp",
                "super", "switch", "synchronized", "this", "throw", "throws", "transient", "try",
                "void", "volatile", "while"};

            ArrayList<String> suggStrings = new ArrayList<String>();
            suggStrings.addAll(Arrays.asList(string));

            for (TabModel opf : arrayList) {

                String name = opf.getFile().getName();
                String[] split = name.split("\\.");
                suggStrings.add(split[0]);

            }

            Pattern compile = Pattern.compile("^" + selectedText + "\\w+$");
            //     System.out.println(compile.pattern());
            if (!compile.pattern().equals("^\\w+$") & !compile.pattern().equals("^null\\w+$")) {
                for (String key : suggStrings) {
                    Matcher matcher = compile.matcher(key);
                    while (matcher.find()) {
                        int start;
                        if (autofillCheckBoxMenuItem.isEnabled()) {
                            start = (jTextPane.getCaretPosition() - selectedText.length());
                        } else {
                            start = jTextPane.getCaretPosition();
                        }

                        try {
                            jTextPane.getDocument().remove(start, selectedText.length());
                            jTextPane.getDocument().insertString(jTextPane.getCaretPosition(), " " + key + " ", null);
                            caretPosition = jTextPane.getCaretPosition() - 1;
                            count = 0;
                            break;
                        } catch (BadLocationException ex) {
                            JOptionPane.showMessageDialog(this, ex.getMessage());
                        }

                    }
                }
            }





            // do key event

        }
    }//GEN-LAST:event_keyMenuItemActionPerformed

    private void autofillCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autofillCheckBoxMenuItemActionPerformed
        // TODO add your handling code here:
        if (textTabbedPane.getTabCount() > 0) {
            final JTextPane jTextPane = arrayList.get(textTabbedPane.getSelectedIndex()).getjTextPane();
            KeyAdapter keyAdapter = new KeyAdapter() {
                @Override
                public void keyPressed(KeyEvent e) {//keyTyped

                    if (!e.isControlDown()) {
                        if (e.getKeyCode() == KeyEvent.VK_SPACE | e.getKeyCode() == KeyEvent.VK_ENTER) {
                            caretPosition = jTextPane.getCaretPosition();
                            count = 0;
                        } else if (e.getKeyCode() == KeyEvent.VK_BACK_SPACE) {
                            count -= 1;
                        } else {
                            count += 1;
                        }
                    }
                    //        System.out.println(caretPosition + " " + count);


                    try {
                        // String q = jTextPane.getDocument().getText(jTextPane.getCaretPosition() - 1, 1);

                        if (e.getKeyChar() == '"') {
                            // System.out.println(q + " " + jTextPane.getCaretPosition());
                            jTextPane.getDocument().insertString(jTextPane.getCaretPosition(), "\"", null);
                            jTextPane.setCaretPosition(jTextPane.getCaretPosition() - 1);

                        }
                    } catch (BadLocationException ex) {
                        JOptionPane.showMessageDialog(null, ex.getMessage());
                    }


                }
            };


            if (autofillCheckBoxMenuItem.isSelected()) {

                jTextPane.addKeyListener(keyAdapter);


            } else {
                jTextPane.removeKeyListener(keyAdapter);

            }
        }
    }//GEN-LAST:event_autofillCheckBoxMenuItemActionPerformed

    private void autoupCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoupCheckBoxMenuItemActionPerformed
        // TODO add your handling code here:
        if (textTabbedPane.getTabCount() > 0) {
            final JTextPane jTextPane = arrayList.get(textTabbedPane.getSelectedIndex()).getjTextPane();

            KeyAdapter keyAdapter = new KeyAdapter() {
                @Override
                public void keyPressed(KeyEvent e) {

                    //   System.out.println(e.isActionKey() + " " + e.isControlDown());


                    if (arrayList.get(textTabbedPane.getSelectedIndex()).isSaved() && !e.isControlDown()) {
                        //  System.out.println("pre saved");
                        arrayList.get(textTabbedPane.getSelectedIndex()).setSaved(false);
                        setTitle(arrayList.get(textTabbedPane.getSelectedIndex()).getFile().getAbsolutePath());
                    } else {
                        //  System.out.println("not saved");
                    }

                    if (e.getKeyCode() == KeyEvent.VK_SPACE) {
                        keywordSerach(null);
                    }

                    // System.out.println("kysea");
                }
            };

            if (autoupCheckBoxMenuItem.isSelected()) {


                jTextPane.addKeyListener(keyAdapter);

            } else {
                jTextPane.removeKeyListener(keyAdapter);
            }
        }
    }//GEN-LAST:event_autoupCheckBoxMenuItemActionPerformed

    private void dicCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dicCheckBoxMenuItemActionPerformed
        // TODO add your handling code here:
        if (textTabbedPane.getTabCount() > 0) {
            final JTextPane jTextPane = arrayList.get(textTabbedPane.getSelectedIndex()).getjTextPane();
            if (dicCheckBoxMenuItem.isSelected()) {

                SpellChecker.setUserDictionaryProvider(new FileUserDictionary());
                try {
                    SpellChecker.registerDictionaries(null, null);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e.getMessage());
                }
                SpellChecker.register(jTextPane, true, true, true, true);


            } else {
                SpellChecker.unregister(jTextPane);
            }
        }
    }//GEN-LAST:event_dicCheckBoxMenuItemActionPerformed

    private void copyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyMenuItemActionPerformed
        // TODO add your handling code here:
        if (textTabbedPane.getTabCount() > 0) {
            final JTextPane jTextPane = arrayList.get(textTabbedPane.getSelectedIndex()).getjTextPane();
            jTextPane.copy();

        }
    }//GEN-LAST:event_copyMenuItemActionPerformed

    private void cutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutMenuItemActionPerformed
        // TODO add your handling code here:
        if (textTabbedPane.getTabCount() > 0) {
            final JTextPane jTextPane = arrayList.get(textTabbedPane.getSelectedIndex()).getjTextPane();
            jTextPane.cut();

        }
    }//GEN-LAST:event_cutMenuItemActionPerformed

    private void pastMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pastMenuItemActionPerformed
        // TODO add your handling code here:
        if (textTabbedPane.getTabCount() > 0) {
            final JTextPane jTextPane = arrayList.get(textTabbedPane.getSelectedIndex()).getjTextPane();
            jTextPane.paste();

        }
    }//GEN-LAST:event_pastMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        try {
            ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream("SentiRecents.log"));
            objectOutputStream.writeObject(hashSet);
            System.exit(0);

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }


    }//GEN-LAST:event_exitMenuItemActionPerformed
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JCheckBoxMenuItem autofillCheckBoxMenuItem;
    private javax.swing.JCheckBoxMenuItem autoupCheckBoxMenuItem;
    private javax.swing.JMenuItem bandrunMenuItem;
    private javax.swing.JMenuItem buildMenuItem;
    private javax.swing.JMenuItem closeAllTabMenuItem;
    private javax.swing.JMenuItem closeTabMenuItem;
    private javax.swing.JMenuItem compileMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JCheckBoxMenuItem dicCheckBoxMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenuItem fontMenuItem;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JMenuItem keyMenuItem;
    private javax.swing.JMenuItem newMenuItem;
    private javax.swing.JMenuItem nextTabMenuItem;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pastMenuItem;
    private javax.swing.JMenuItem preTabMenuItem;
    private javax.swing.JMenu recentMenu;
    private javax.swing.JMenuItem redoMenuItem;
    private javax.swing.JMenuItem runMenuItem;
    private javax.swing.JMenuItem saveAllMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JTabbedPane textTabbedPane;
    private javax.swing.JMenuItem undoMenuItem;
    // End of variables declaration//GEN-END:variables

    private void saveSelecedtab(File file, JTextPane jTextPane) {
        keywordSerach(jTextPane);
        FileWriter fw = null;
        try {
            fw = new FileWriter(file);
            fw.write(jTextPane.getText());
            fw.flush();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } finally {
            try {
                fw.close();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
    }

    private void setundoredo(JTextPane jTextPane, final UndoManager undoManager) {
        jTextPane.getStyledDocument().addUndoableEditListener(new UndoableEditListener() {
            @Override
            public void undoableEditHappened(UndoableEditEvent e) {
                undoManager.undoableEditHappened(e);
            }
        });
    }

    private void closetab() {
        int selectedIndex = textTabbedPane.getSelectedIndex();
        if (textTabbedPane.getTabCount() > 0) {
            textTabbedPane.remove(selectedIndex);
            hashSet.add(arrayList.get(selectedIndex).getFile().getAbsolutePath());
            arrayList.remove(selectedIndex);

            recentMenu.removeAll();
            for (String file : hashSet) {
                JMenuItem jMenuItem = new JMenuItem(file);
                jMenuItem.addActionListener(new AbstractAction() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        open(e.getSource());
                    }
                });
                recentMenu.add(jMenuItem);
            }
        }
    }

    public static void main(String[] args) {
        // TODO code application logic here
        Main main = new Main();
        main.setSize(Toolkit.getDefaultToolkit().getScreenSize());
        main.setVisible(true);
    }

    private void keywordSerach(JTextPane jtp) {


        if (jtp == null) {
            jtp = arrayList.get(textTabbedPane.getSelectedIndex()).getjTextPane();
        }
        //    int caretPosition = jtp.getCaretPosition();
        final String string[] = {"abstract", "assert", "boolean", "break", "byte", "case",
            "catch", "char", "class", "const", "continue", "default", "do", "double", "else",
            "enum", "extends", "final", "finally", "float", "for", "goto", "if", "implements",
            "import", "instanceof", "int", "interface", "long", "native", "new", "package", "private",
            "protected", "public", "return", "short", "static", "strictfp",
            "super", "switch", "synchronized", "this", "throw", "throws", "transient", "try",
            "void", "volatile", "while"};

        final String text = jtp.getText();
        //   StyleContext sc = new StyleContext();
        StyleContext sc = arrayList.get(textTabbedPane.getSelectedIndex()).getSc();

        //   DefaultStyledDocument docn = new DefaultStyledDocument(sc);
        //  jtp.setDocument(new DefaultStyledDocument(sc));

        DefaultStyledDocument doc = (DefaultStyledDocument) jtp.getDocument();

        Style defaultStyle = sc.getStyle(StyleContext.DEFAULT_STYLE);
        final Style mainStyle = sc.addStyle("MainStyle", defaultStyle);

        StyleConstants.setFontFamily(mainStyle, jtp.getFont().getFamily());
        StyleConstants.setFontSize(mainStyle, jtp.getFont().getSize());
        StyleConstants.setBold(mainStyle, false);
        StyleConstants.setItalic(mainStyle, false);

        final Style bkStyle = sc.addStyle("ConstantWidth", null);
        StyleConstants.setForeground(bkStyle, Color.BLACK);

        final Style cwStyle = sc.addStyle("ConstantWidth", null);
        StyleConstants.setForeground(cwStyle, Color.BLUE);

        final Style quStyle = sc.addStyle("ConstantWidth", null);
        StyleConstants.setForeground(quStyle, Color.ORANGE);

        final Style comStyle = sc.addStyle("ConstantWidth", null);
        StyleConstants.setForeground(comStyle, Color.LIGHT_GRAY);

        final Style openedStyle = sc.addStyle("ConstantWidth", null);
        StyleConstants.setForeground(openedStyle, Color.green);

        //       try {

        doc.setLogicalStyle(1, mainStyle);

        //   doc.insertString(0, text, null);

        Pattern bkcompile = Pattern.compile(".");
        Matcher bkmatcher = bkcompile.matcher(text);
        while (bkmatcher.find()) {
            // System.out.println(matcher.group() + " " + matcher.start() + " " + matcher.end());
            doc.setCharacterAttributes(bkmatcher.start(), (bkmatcher.end() - bkmatcher.start()), bkStyle, false);
        }

        for (String key : string) {
            Pattern compile = Pattern.compile("\\b" + key + "\\b");
            Matcher matcher = compile.matcher(text);
            while (matcher.find()) {
                // System.out.println(matcher.group() + " " + matcher.start() + " " + matcher.end());
                doc.setCharacterAttributes(matcher.start(), (matcher.end() - matcher.start()), cwStyle, false);
            }
        }

        for (TabModel opf : arrayList) {
            String name = opf.getFile().getName();
            String[] split = name.split("\\.");
            Pattern opcompile = Pattern.compile("\\b" + split[0] + "\\b");
            //  System.out.println(split[0]);
            Matcher opmatcher = opcompile.matcher(text);
            while (opmatcher.find()) {
                // System.out.println(matcher.group() + " " + matcher.start() + " " + matcher.end());
                doc.setCharacterAttributes(opmatcher.start(), (opmatcher.end() - opmatcher.start()), openedStyle, false);
            }
        }

        Pattern qucompile = Pattern.compile("[\\\"][\\w\\s\\p{Punct}&&[^\\\"]]*[\\\"]");
        Matcher uqmatcher = qucompile.matcher(text);
        while (uqmatcher.find()) {
            // System.out.println(matcher.group() + " " + matcher.start() + " " + matcher.end());
            doc.setCharacterAttributes(uqmatcher.start(), (uqmatcher.end() - uqmatcher.start()), quStyle, false);
        }

        Pattern ccompile = Pattern.compile("[/][/][\\w\\t \\p{Punct}]*");
        Matcher cmatcher = ccompile.matcher(text);
        while (cmatcher.find()) {
            // System.out.println(matcher.group() + " " + matcher.start() + " " + matcher.end());
            doc.setCharacterAttributes(cmatcher.start(), (cmatcher.end() - cmatcher.start()), comStyle, false);
        }

//            } catch (BadLocationException e) {
//                JOptionPane.showMessageDialog(null, e.getMessage());
//              }

        //  jtp.setCaretPosition(caretPosition);
    }

    private void seteditfont(JTextPane jtp, Font selectedFont) {

        final String string[] = {"abstract", "assert", "boolean", "break", "byte", "case",
            "catch", "char", "class", "const", "continue", "default", "do", "double", "else",
            "enum", "extends", "final", "finally", "float", "for", "goto", "if", "implements",
            "import", "instanceof", "int", "interface", "long", "native", "new", "package", "private",
            "protected", "public", "return", "short", "static", "strictfp",
            "super", "switch", "synchronized", "this", "throw", "throws", "transient", "try",
            "void", "volatile", "while"};

        final String text = jtp.getText();



        StyleContext sc = new StyleContext();
        final DefaultStyledDocument doc = new DefaultStyledDocument(sc);
        jtp.setDocument(doc);


        Style defaultStyle = sc.getStyle(StyleContext.DEFAULT_STYLE);
        final Style mainStyle = sc.addStyle("MainStyle", defaultStyle);
        StyleConstants.setFontFamily(mainStyle, selectedFont.getFamily());
        StyleConstants.setFontSize(mainStyle, selectedFont.getSize());
        // System.out.println(selectedFont.getFamily()+" "+selectedFont.getFontName()+" "+selectedFont.getName()+" "+selectedFont.getSize());
        if (selectedFont.isBold()) {
            StyleConstants.setBold(mainStyle, true);
        } else if (selectedFont.isItalic()) {
            StyleConstants.setItalic(mainStyle, true);
        } else if (selectedFont.isPlain()) {
            StyleConstants.setBold(mainStyle, false);
            StyleConstants.setItalic(mainStyle, false);
        }


        final Style cwStyle = sc.addStyle("ConstantWidth", null);
        StyleConstants.setForeground(cwStyle, Color.BLUE);

        final Style quStyle = sc.addStyle("ConstantWidth", null);
        StyleConstants.setForeground(quStyle, Color.ORANGE);

        final Style comStyle = sc.addStyle("ConstantWidth", null);
        StyleConstants.setForeground(comStyle, Color.LIGHT_GRAY);

        try {
            doc.setLogicalStyle(0, mainStyle);

            doc.insertString(0, text, null);

            for (String key : string) {
                Pattern compile = Pattern.compile("\\b" + key + "\\b");
                Matcher matcher = compile.matcher(text);
                while (matcher.find()) {
                    // System.out.println(matcher.group() + " " + matcher.start() + " " + matcher.end());
                    doc.setCharacterAttributes(matcher.start(), (matcher.end() - matcher.start()), cwStyle, false);
                }
                Pattern qucompile = Pattern.compile("[\\\"][\\w\\s\\p{Punct}&&[^\\\"]]*[\\\"]");
                Matcher uqmatcher = qucompile.matcher(text);
                while (uqmatcher.find()) {
                    // System.out.println(matcher.group() + " " + matcher.start() + " " + matcher.end());
                    doc.setCharacterAttributes(uqmatcher.start(), (uqmatcher.end() - uqmatcher.start()), quStyle, false);
                }
                Pattern ccompile = Pattern.compile("[//][\\w\\t \\p{Punct}]*");
                Matcher cmatcher = ccompile.matcher(text);
                while (cmatcher.find()) {
                    // System.out.println(matcher.group() + " " + matcher.start() + " " + matcher.end());
                    doc.setCharacterAttributes(cmatcher.start(), (cmatcher.end() - cmatcher.start()), comStyle, false);
                }

            }

        } catch (BadLocationException e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }


    }

    private void open(Object o) {
        JMenuItem jmi = (JMenuItem) o;
        File selectedFiles = new File(jmi.getText());

        ArrayList<File> preFiles = new ArrayList<File>();
        for (int i = 0; i < arrayList.size(); i++) {
            preFiles.add(arrayList.get(i).getFile());
            //     System.out.println(arrayList.size()+" ");
        }

        ArrayList<File> finelFiles = new ArrayList<File>();

        for (int j = 0; j < preFiles.size(); j++) {
            // System.out.println(selectedFiles[i].toString()+" "+preFiles.get(j).toString());
            if (selectedFiles.compareTo(preFiles.get(j)) == 0) {
                JOptionPane.showMessageDialog(this, selectedFiles + " Class Alrady Viwed");
                break;
            } else if (preFiles.size() - 1 == j) {
                finelFiles.add(selectedFiles);
            }
        }

        if (arrayList.isEmpty()) {
            finelFiles.add(selectedFiles);
        }

        for (File file : finelFiles) {
            if (file != null) {
                JTextPane jTextPane = new JTextPane();
                StyleContext styleContext = new StyleContext();
                jTextPane.setDocument(new DefaultStyledDocument(styleContext));
                jTextPane.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 14));
                JScrollPane jScrollPane = new JScrollPane(jTextPane);
                jScrollPane.setSize(textTabbedPane.getSize());
                textTabbedPane.addTab(file.getName(), jScrollPane);

                try {
                    final UndoManager undoManager = new UndoManager();
                    FileReader fileReader = new FileReader(file);
                    BufferedReader bufferedReader = new BufferedReader(fileReader);
                    String line;
                    String text = "";
                    while ((line = bufferedReader.readLine()) != null) {
                        text += line + "\n";
                    }
                    jTextPane.setText(text);
                    textTabbedPane.setSelectedIndex(textTabbedPane.getTabCount() - 1);
                    jTextPane.getStyledDocument().addUndoableEditListener(new UndoableEditListener() {
                        @Override
                        public void undoableEditHappened(UndoableEditEvent e) {
                            undoManager.undoableEditHappened(e);
                        }
                    });
                    // updateCheckBoxMenuItemActionPerformed(evt);


                    arrayList.add(new TabModel(file, jTextPane, undoManager, true, styleContext));

                    keywordSerach(jTextPane);


                    autofillCheckBoxMenuItemActionPerformed(null);
                    autoupCheckBoxMenuItemActionPerformed(null);
                    dicCheckBoxMenuItemActionPerformed(null);


                    setTitle(file.getAbsolutePath());
                } catch (FileNotFoundException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage());
                }
            }
        }
    }

    private void loadRecents() {
        try {
            ObjectInputStream objectInputStream = new ObjectInputStream(new FileInputStream("SentiRecents.log"));
            Object readObject = objectInputStream.readObject();
            hashSet = (HashSet) readObject;
        } catch (FileNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }


        for (String file : hashSet) {
            JMenuItem jMenuItem = new JMenuItem(file);
            jMenuItem.addActionListener(new AbstractAction() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    open(e.getSource());
                }
            });
            recentMenu.add(jMenuItem);
        }

        if (hashSet.size() > 10) {
            hashSet.clear();
        }
    }
}
